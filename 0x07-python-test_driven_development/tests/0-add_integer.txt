Test Cases for 0-add_integer module:

>>> add_integer = __import__('0-add_integer').add_integer

>>> add_integer(2, 3)
5
>>> add_integer(100, -2)
98
>>> add_integer(4.5, 8.2)
12
>>> add_integer(-1.1, -1.4)
-2
>>> add_integer(0, 0)
0
>>> add_integer(1)
99
>>> add_integer(4,)
102

>>> add_integer(4, "b")
Traceback (most recent call last):
	...
	TypeError: b must be an integer

>>> add_integer("a", 2)
Traceback (most recent call last):
	...
	TypeError: a must be an integer

'both a and b are empty'

>>> add_integer()
Traceback (most recent call last):
	...
	TypeError: add_integer() missing 1 required positional argument: 'a'

'a is a boolean'

>>> add_integer(True, 3)
Traceback (most recent call last):
	...
	TypeError: a must be an integer

'a is a tuple'

>>> add_integer((1, 2), 3)
Traceback (most recent call last):
	...
	TypeError: a must be an integer

'a is a list'

>>> add_integer([1, 2], 3)
Traceback (most recent call last):
	...
	TypeError: a must be an integer

'a is a dictionary'

>>> add_integer({"a": 1, "b": 2}, 3)
Traceback (most recent call last):
	...
	TypeError: a must be an integer

'a is a set'

>>> add_integer({1, 2}, 3)
Traceback (most recent call last):
	...
	TypeError: a must be an integer

'b is a boolean'

>>> add_integer(1, False)
Traceback (most recent call last):
	...
	TypeError: b must be an integer

'b is a tuple'

>>> add_integer(1, (1, 2))
Traceback (most recent call last):
	...
	TypeError: b must be an integer

'b is a list'

>>> add_integer(1, [1, 2])
Traceback (most recent call last):
	...
	TypeError: b must be an integer

'b is a dictionary'

>>> add_integer(1, {"a": 1, "b": 2})
Traceback (most recent call last):
	...
	TypeError: b must be an integer

'b is a set'

>>> add_integer(1, {1, 2})
Traceback (most recent call last):
	...
	TypeError: b must be an integer
	