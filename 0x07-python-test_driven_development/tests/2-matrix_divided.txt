Test Cases for 2-matrix_divided module:

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]

'divide matrix by integer'

>>> matrix_divided(matrix, 2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

'divide matrix by float'

>>> matrix = [
...     [1.0, 2.0, 3.0],
...     [4.0, 5.0, 6.0]
... ]

>>> matrix_divided(matrix, 2.0)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

'divide matrix by 0'

>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6]
... ]

>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

'matrix rows of different sizes'

>>> matrix = [
...     [1, 2, 3],
...     [4, 5, 6],
...     [7, 8]
... ]

>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

'not a matrix'

>>> matrix = 0
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

'matrix is a string'

>>> matrix = "matrix"
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

'div is a string'

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, "2")
Traceback (most recent call last):
	...
	TypeError: div must be a number

'div is a list'

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, [2])
Traceback (most recent call last):
	...
	TypeError: div must be a number

'div is a dictionary'

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, {"2": 2})
Traceback (most recent call last):
	...
	TypeError: div must be a number

'div is a set'

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, {2})
Traceback (most recent call last):
	...
	TypeError: div must be a number

'div is a tuple'

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, (2,))
Traceback (most recent call last):
	...
	TypeError: div must be a number